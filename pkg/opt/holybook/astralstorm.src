use uo;
use os;
use polsys;

include "include/spelldata";
include "include/client";
include "include/dotempmods";

const SPELL_EFFECT_TYPE_MOVING 	:= MOVING_SPELL_ASTRAL_STORM;
const SPELL_EFFECT_ID		:= FX_SPELL_ASTRAL_STORM;
const SPELL_EFFECT_SPEED	:= SPEED_SPELL_ASTRAL_STORM;
const SPELL_EFFECT_LOOP		:= LOOP_SPELL_ASTRAL_STORM;

program cast_Astral_Storm( parms )

	var circle := GetCircle( SPELLID_ASTRAL_STORM );
	var element := HOLY;
	var caster;
	var cast_on;
	var fromhit;
	var wasfrozen := 0;
	
	
	if (parms[1] == "#MOB")
		caster := parms[2];
		cast_on := parms[3];
		if (parms[4])
			circle := parms[4];
		endif
		if (parms[5])
			fromhit := parms[5];
		endif

		Send_Attack( cast_on , caster , SPELLID_ASTRAL_STORM );
	else
		caster := parms;
		if( TryToCast( caster, SPELLID_ASTRAL_STORM ) != SUCCESS )
			EraseObjProperty( caster , "#Casting" );
			return;
		endif
		cast_on := CanTargetSpell( caster , circle , TGTOPT_HARMFUL + TGTOPT_CHECK_LOS );
		
		if( !cast_on )
			EraseObjProperty( caster , "#Casting" );
			return;
		endif
	endif
	
	if (cast_on.frozen == 1)
		wasfrozen := 1;
	endif
	
	if( !fromhit )
		EraseObjProperty( caster , "#Casting" );
		cast_on := Reflected( caster , cast_on , circle );
	endif
	PlaySoundEffect( cast_on , SFX_SPELL_ASTRAL_STORM );
			
	var immunity := IsProtected( caster , cast_on , circle );
	if( immunity == IMMUNED )
		EraseObjProperty( caster , "#Casting" );
		return;
	endif
	if( immunity == CURSED )
		circle := circle * 2;
	endif
	var duration := ModifyWithMagicEfficiency( caster , 5 );

	//Reduce time from magic resistance
	var skillresist := Cint(GetEffectiveSkill(cast_on, SKILLID_MAGICRESISTANCE));
	skillresist := 1.0 + (CDbl(skillresist)*3.5/1000.0);
	duration := duration / skillresist;
	
	//Reduce time further for mages?
	var characterClass := GetObjProperty(cast_on, "IsMage");
	var classresist := 1;
	if (characterClass > 0)
		classresist := 1+ (CDbl(characterClass)*0.05);
	endif
	duration := duration/classresist;
	
	//Reduce time due to Holy Protection
	var holyprot := CInt(GetObjProperty(cast_on, "NecroProtection"));
	duration := Cint(duration * (1-(holyprot*0.75)/100));

	//Reduce 25% for Free Action
	var freeaction := GetObjProperty(cast_on, "FreeAction");
	if (freeaction)
		duration := duration * 0.75;
	endif
	
	if (duration > 0)
		if (!wasfrozen)
			cast_on.frozen :=1;
			IncRevision(cast_on);
		endif
		BuffOn(cast_on, "paralyze", 1, CInt(duration));
		var fxduration := CInt(duration-2);
		PlayStationaryEffect(cast_on.x, cast_on.y, cast_on.z, 0x17bd, fxduration);
		PlayStationaryEffect(cast_on.x-1, cast_on.y, cast_on.z, 0x17ca, fxduration);
		PlayStationaryEffect(cast_on.x+1, cast_on.y, cast_on.z, 0x17cc, fxduration);
		PlayStationaryEffect(cast_on.x, cast_on.y+1, cast_on.z, 0x17c9, fxduration);
		PlayStationaryEffect(cast_on.x, cast_on.y-1, cast_on.z, 0x17cb, fxduration);
		PlayStationaryEffect(cast_on.x-1, cast_on.y+1, cast_on.z, 0x17c8, fxduration);
		PlayStationaryEffect(cast_on.x-1, cast_on.y-1, cast_on.z, 0x17c5, fxduration);
		PlayStationaryEffect(cast_on.x+1, cast_on.y-1, cast_on.z, 0x17c6, fxduration);
		PlayStationaryEffect(cast_on.x+1, cast_on.y+1, cast_on.z, 0x17c7, fxduration);
	else
		SendSysMessage(caster, cast_on.name + " is protected from paralyzing effects!");
		SendSysMessage(cast_on,  "You are protected from paralyzing effects!");
	endif

	start_script("astralstorm_damage", {caster, cast_on, circle});
	
	Sleep(CInt(duration));
	if (!wasfrozen)
		cast_on.frozen :=0;
	endif
	cast_on.SetParalyzed(0);
	EraseObjProperty( caster , "#Casting" );
	BuffOff(cast_on,"paralyze");
	IncRevision(cast_on);

endprogram
